#!/bin/python

import os, sys, json, argparse

version = "1.3"

# set command line arguments
parser = argparse.ArgumentParser(description="compiles TI-BASIC programs")
parser.add_argument("target", choices=['compile', 'decompile'])
parser.add_argument("inputfile", help="path to the input file")
parser.add_argument("outputfile", help="path to the output file. existing files will be overwritten")
args = parser.parse_args()

inputfile = args.inputfile
outputfile = args.outputfile

# open dict of tokens with 'token, string' pairs
allTokenFilePaths = (
        os.path.join(sys.prefix, "share/stibc/tokens.json"),
        os.path.join(os.path.dirname(os.path.realpath(__file__)), "tokens.json"),
        )

tokenFilePath = None
for path in allTokenFilePaths:
    if os.path.isfile(path):
        tokenFilePath = path
        break

if not tokenFilePath:
    raise Exception("Could not find the token file. Try reinstalling the program.")

tokenFile = open(tokenFilePath, "r")
tokenDict = json.load(tokenFile)
tokenFile.close()

# create inverted dict for compiling
invTokenDict = {}
for key in tokenDict["one-byte"].keys():
    if key != "0x71":
        invTokenDict[tokenDict["one-byte"][key]] = key

# the secondary tokens of all of the characters that have more than one token that represent them
dupeKeys = ("0xa7", "0xb0", "0xb1", "0xb2", "0xb3", "0xb4", "0xbe", "0xc0", "0xc2", "0xc3", "0xc4", "0xc5", "0xc6", "0xc7", "0xca", "0xd5", "0xde")
for key1 in tokenDict["two-byte"].keys():
    for key2 in tokenDict["two-byte"][key1].keys():
        if key1 == "0xbb":
            if key2 not in dupeKeys:    # leaving out the duplicate tokens from the inverted dict; they will not be used when compiling
                invTokenDict[tokenDict["two-byte"][key1][key2]] = key1 + " " + key2

        else:
            invTokenDict[tokenDict["two-byte"][key1][key2]] = key1 + " " + key2

def twoByteSize(num):
    """Returns a two-byte hex string in little-endian style from the given decimal number"""
    digits = len(hex(num)) - 2
    if digits < 3:
        return [hex(num), "0x0"]
    elif digits == 3:
        return ["0x" + hex(num)[-2:], "0x" + hex(num)[-3]]
    elif digits > 3:
        return ["0x" + hex(num)[-2:], "0x" + hex(num)[-4:-2]]

## compilation
if args.target == "compile":
    # read code from file
    file = open(inputfile, "r")
    code = file.readlines()
    file.close()

    # make sure that the input file is formatted properly wth the name, info and archived fields
    if code[0][0:7].lower() != "#name: " or code[1][0:7].lower().strip() != "#info:" or code[2][0:11].lower() != "#archived: " or code[3][:-1].strip() != "":
        raise Exception("Document not properly formatted for compilation\nCheck the README file for info on formatting")

    # check for program name
    if len(code[0]) < 8:
        raise Exception("No program name specified after '#name: '")
    else:
        name = code[0][7:-1].strip()
    for char in name:
        if len(name) > 8 or char not in "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789":
            raise Exception("Invalid name '%s'\nCheck the README file for info on formatting" % name)
    
    # check for comment
    if len(code[1]) < 8:
        comment = ""
    else:
        comment = code[1][7:-1].strip()
    if len(comment) > 42: raise Exception("Invalid comment; must be <= 42 characters")
    elif len(comment) == 0: comment = "Created by STIBC v%s" % version
    archived = code[2][11:-1].strip().lower() == "true" # get archived flag

    tokenList = invTokenDict.keys()
    tokenList.sort()
    tokenList.sort(key=len, reverse=True)

    # string that will contain every byte of the compiled code in hex
    outputStr = ""

    lineNum = 4 # code starts on line 4
    for line in code[4:]:
        currentLine = unicode(line.replace("\n", "").strip() + "\n")
        lineNum += 1
        while len(currentLine) > 0:
            testString = currentLine
            while testString not in tokenList:  # keep removing characters from the end of the line until a token is found; i.e. find the longest token starting from the beginning of the line
                testString = testString[:-1]
                if len(testString) == 0:
                    raise Exception("Unsupported character on line %s: '%s'\n%s" % (lineNum, currentLine[0], line))

            # add the hex value of the token to the output string
            outputStr += invTokenDict[testString] + " "
            # remove the previously found token from the beginning of the line
            currentLine = currentLine[len(testString):]

    # convert the output string into a list containing every byte as a string
    output = str(outputStr).split(" ")
    # remove spaces and newlines from the end of the file
    while output[-1] == "0x3f" or output[-1] == "0x29" or output[-1] == "":
        output = output[:-1]

    # list of one-byte tokens which will cause a '-' after it to become a subtract sign instead of a negative sign
    minusTokens = (
    "0x11", "0x6", "0x9", "0x30", "0x31", "0x32", "0x33", "0x34", "0x35", "0x36", "0x37", "0x38", "0x39",
    "0x41", "0x42", "0x43", "0x44", "0x45", "0x46", "0x47", "0x48", "0x49", "0x4a", "0x4b", "0x4c", "0x4d",
    "0x4e", "0x4f", "0x50", "0x51", "0x52", "0x53", "0x54", "0x55", "0x56", "0x57", "0x58", "0x59", "0x5a",
    "0x5b", "0xac", "0x2c", "0x2a", "0x72", "0xd", "0xf"
    )

    # change negative signs to subtract signs where appropriate
    for i in range(len(output)):
        if output[i] == "0xb0":
            # if there are at least 3 in a row, convert all following negative signs into subtract signs until a different token is found
            if i < len(output) - 2 and output[i+1] == "0xb0" and output[i+2] == "0xb0":
                while output[i] == "0xb0" and i < len(output):
                    output[i] = "0x71"
                    i += 1

                i -= 1

            # otherwise check the previous character to determine whether or not to change it
            elif i > 0 and (output[i-1] in minusTokens and i > 1 and output[i-2] not in tokenDict["two-byte"].keys()) or (i > 1 and (output[i-2] == "0x5c" or output[i-2] == "0x5d" or output[i-2] == "0x5e" or output[i-2] == "0x62" or output[i-2] == "0xaa" or (output[i-2] == "0xbb" and output[i-1] == "0x31"))):
                output[i] = "0x71"

    # the standard header for TI-BASIC programs
    header = ["0x2a", "0x2a", "0x54", "0x49", "0x38", "0x33", "0x46", "0x2a", "0x1a", "0xa", "0x0"]
    # add 42 character comment padded with 0x0
    for i in range(42):
        if i < len(comment):
            header += [hex(ord(comment[i]))]
        else:
            header += ["0x0"]

    # add size of data section, size of program data, variable id (0x5), and program name
    header += twoByteSize(len(output) + 19) + ["0xd", "0x0"] + twoByteSize(len(output) + 2) + ["0x5"]
    for i in range(8):
        if i < len(name):
            header += [hex(ord(name[i]))]
        else:
            header += ["0x0"]

    header += ["0x0"]
    # add archived flag
    if archived:
        header += ["0x80"]
    else:
        header += ["0x0"]

    # add size of program data
    header += twoByteSize(len(output) + 2) + twoByteSize(len(output))

    # calculate checksum
    sum = 0
    for byte in header[-19:] + output:
        sum += int(byte, 16)

    checkSum = twoByteSize(sum)

    # combine header, code, and checksum, then write to file
    fullOutput = header + output + checkSum

    file = open(outputfile, "wb")
    for byte in fullOutput:
        file.write(chr(int(byte, 16)))

    file.close()

else:   ## decompilation
    file = open(inputfile, "rb")
    
    # create list of bytes
    code = []
    for char in file.read():
        code.append(hex(ord(char)))

    file.close()

    header = ""
    name = ""
    # get header data and extract program name
    for i in range(8):
        header += chr(int(code[i], 16))
        if code[i+60] != "0x0":
            name += chr(int(code[i+60], 16))

    # make sure the input file is actually a TI-BASIC program
    if header != "**TI83F*" or code[59] != "0x5":
        raise Exception("Not a TI-BASIC program")

    comment = ""
    # get comment string
    for i in range(11, 53):
        if code[i] != "0x0":
            comment += chr(int(code[i], 16))

    file = open(outputfile, "w")
    # write header information at top of file
    string = "#Name: %s\n" % name
    string += "#Info: %s\n" % comment
    string += "#Archived: %s\n\n" % str(code[69] == "0x80").lower()

    # decompile the program
    twoByte = ""
    for i in range(74, len(code[:-2])):
        byte = code[i]
        if twoByte != "":
            string += tokenDict["two-byte"][twoByte][byte]
            twoByte = ""
        elif byte in tokenDict["two-byte"]: # if a two-byte token is detected do nothing and get the next byte
            twoByte = byte
        else:
            string += tokenDict["one-byte"][byte]

    file.write(string)
    file.close()
